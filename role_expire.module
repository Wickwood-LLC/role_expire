<?php
// $Id$ 

/**
 * @file
 * Role Expire module
 *
 * Enables user roles to expire on given time.
 */


/*******************************************************************************
 * API functions
 ******************************************************************************/

/**
 * API function; Get expiration time of a user role.
 * @param $uid
 *   User ID.
 * @param $rid
 *   Role ID.
 * @return
 *  Array with the expiration time.
 */
function role_expire_get_user_role_expiry_time($uid, $rid) {
  $result = db_fetch_array(db_query("SELECT expiry_timestamp FROM {role_expire} WHERE uid=%d AND rid = %d", $uid, $rid));
  return (!empty($result)) ? $result['expiry_timestamp'] : '';
}

/**
 * API function; Get expiration of all roles of a user.
 * @param $uid
 *   User ID.
 * @param $rid
 *   Role ID.
 * @return
 *  Array with the expiration time.
 */
function role_expire_get_all_user_records($uid) {
  $return = array();
  $result = db_query("SELECT rid, expiry_timestamp FROM {role_expire} WHERE uid=%d", $uid);
  while ($row = db_fetch_array($result)) {
    $return[$row['rid']] = $row['expiry_timestamp'];
  }
  return $return;
}

/**
 * API function; Delete a record from the database.
 * 
 * @param $rid
 *   Role ID.
 * @param $uid
 *   User ID.
 * @return
 */
function role_expire_delete_record($uid, $rid) {
  db_query("DELETE FROM {role_expire} WHERE uid=%d AND rid = %d", $uid, $rid);
}
/**
 * API function; Delete all user expirations.
 * 
 * @param $rid
 *   Role ID.
 * @param $uid
 *   User ID.
 * @return
 */
function role_expire_delete_user_records($uid) {
  db_query("DELETE FROM {role_expire} WHERE uid = %d", uid);
}
    

/**
 * API function; Insert or update a record in the database.
 * 
 * @param $rid
 *   Role ID.
 * @param $uid
 *   User ID.
 * @param $expiry_time
 *   The expiration time string.
 */
function role_expire_write_record($uid, $rid, $expiry_timestamp) {
  $result =  db_query("UPDATE {role_expire} SET expiry_timestamp = %d WHERE uid = %d AND rid = %d", $expiry_timestamp, $uid, $rid);
  if (!db_affected_rows()) {
    db_query("INSERT INTO {role_expire} (uid, rid, expiry_timestamp) VALUES (%d, %d, %d)", $uid, $rid, $expiry_timestamp);
  }
}

/**
 * API function; Get all records that should be expired.
 * 
 * @param $time
 *   Optional. The time to check, if not set it will check current time.
 */
function role_expire_get_expired($time = '') {
  $return = array();
  if (!$time) {
    $time = time();
  }
  $result = db_query("SELECT rid, uid, expiry_timestamp FROM {role_expire} WHERE expiry_timestamp <= %d", $time);
  while ($row = db_fetch_array($result)) {
    $return[] = $row;
  }
  return $return;
}


/*******************************************************************************
 * Hook implementations
 ******************************************************************************/

/**
 * Implementation of hook_views_api().
 */
function role_expire_views_api() {
  return array("api" => views_api_version());
}

/**
 * Implementation of hook_perm().
 */
function role_expire_perm() {
  return array('administer role expire');
}

/**
 * Implementation of hook_form_FORM-ID_alter().
 */
function role_expire_form_user_register_alter(&$form, $form_state) {
  $form = array_merge_recursive($form, role_expire_add_expiration_input());
}

/**
 * Implementation of hook_form_FORM-ID_alter().
 */
function role_expire_form_user_profile_form_alter(&$form, $form_state) {
  $form['account']['roles']['#attributes'] = array('class' => 'role-expire-roles');
} 

/**
 * Implementation of hook_user().
 */
function role_expire_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {    
  case 'form':
      return role_expire_add_expiration_input($account);
    break;
    
  case 'validate':
    if (isset($edit['roles'])) {
      $time = time();
      foreach ($edit['roles'] as $rid => $role) {
        if ($edit['role_expire_'. $role]) {
          $expiry_time = strtotime($edit['role_expire_'. $role]);
          if (!$expiry_time) {
            form_set_error('role_expire_'. $role, t("Role expiry time is not in correct format."));
          }
          if ($expiry_time <= $time) {
            form_set_error('role_expire_'. $role, t("Role expiry time must be in the future."));
          }
        }
      }
    }
    break;
        
  case 'submit':
    // We go over all existing roles, because use might have disabled a role.
    $edit['role_expire'] = array();
    foreach (_role_expire_get_role() as $rid => $role) {
      // Normalize role expire array.
      $edit["role_expire"][$rid] = !empty($edit['role_expire_' . $rid]) && !empty($edit['roles'][$rid]) ? $edit['role_expire_' . $rid] : '';
      unset($edit['role_expire_'. $rid]);
    }
    break;
    
  case 'update':
  case 'insert':  
    // Add roles expiry information for the user role.
    $edit += array('role_expire' => array());
    foreach ($edit['role_expire'] as $rid => $role) {   
      if ($role) {
        $expiry_timestamp = strtotime($role);
        role_expire_write_record($account->uid, $rid, $expiry_timestamp);
      }
      else {
        // User input is blank, so delete record.
        role_expire_delete_record($account->uid, $rid);
      }
    }
    // We can remove this now.
    unset($edit['role_expire']);
    break;
     

  case 'delete':    
    // Delete user records.
    role_expire_delete_user_records($uid);
    break;
    
  case 'load':
   // We don't load the information to the user object. Other modules can use 
   // our API to query the information. 
   break;
    
  case'view':
    global $user;
    if (user_access('administer role expire') || user_access('administer users') || $user->uid == $account->uid) {
      $roles = array();
      $expiry_roles = role_expire_get_all_user_records($account->uid);
      foreach ($account->roles as $key => $val) {
        if ($expiry_roles[$key]) {
          $roles[$key] =  t("%role role - expires on %timedate", array('%role' => ucfirst($val), '%timedate' => format_date($expiry_roles[$key])));
        }
      }
      if ($roles) {
        $account->content['summary']['role_expire'] = array(
          '#type' => 'item',
          '#title' => t('Role expiration'),
          '#value' => theme('item_list', $roles),
          '#attributes' => array('class' => 'role-expiry-roles'),
        );
      }
    }
    break;
  }

}

/**
 * Implementation of hook_cron().
 */
function role_expire_cron() { 
  if ($expires = role_expire_get_expired()) {
    $roles = _role_expire_get_role();
    foreach ($expires as $expire) {

      // Remove the role from the user.
      $account = user_load($expire['uid']);
      unset($account->roles[$expire['rid']]);
      user_save($account, array('roles' => $account->roles), NULL);
      
      // Remove the role expiration record.
      role_expire_delete_record($expire['uid'], $expire['rid']);
      watchdog('role expire', 'Remove role @role from user @account.', array('@role' => $roles[$expire['rid']], '@account' => $account->name));    
    }
  }
}


/**
 * Add form element that accepts the role expiration time.
 * 
 * @param $account
 *   The user object.
 * @return
 *   Form element.
 */
function role_expire_add_expiration_input($account = NULL) {
  $form = array();
  if (user_access('administer users') || user_access('administer role expire')) {
    drupal_add_js(drupal_get_path('module', 'role_expire') .'/role_expire.js', 'module');
    $form['roles']['#attributes'] = array('class' => 'role-expire-roles');    

    foreach (_role_expire_get_role() as $rid => $role) {
      $expiry_timestamp = role_expire_get_user_role_expiry_time($account->uid, $rid);
      $form['role_expire_'. $rid] = array(
        '#title' => t("%role role expiration time", array('%role' => ucfirst($role))),
        '#type' => 'textfield',
        '#default_value' => !empty($expiry_timestamp) ? date("d-m-Y G:i:s", $expiry_timestamp) : '',
        '#attributes' => array('class' => 'role-expire-role-expiry'),
        '#description' => t("Leave blank for indefinite time, enter date and time in format: <em>dd-mm-yyyy hh:mm:ss</em> or use relative time i.e. 1 day, 2 months, 1 year, 3 years.")
      );
    }
  }
  return $form;  
}

/*******************************************************************************
 * Helper functions
 ******************************************************************************/

/**
 * Helper function; Get valid roles.
 * @return unknown_type
 */
function _role_expire_get_role() {
  $roles = user_roles(TRUE);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  return $roles;
}