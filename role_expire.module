<?php

/**
 * @file
 * Role Expire module
 *
 * Enables user roles to expire on given time.
 */


/*******************************************************************************
 * API functions
 ******************************************************************************/

/**
 * API function; Get expiration time of a user role.
 * @param $uid
 *   User ID.
 * @param $rid
 *   Role ID.
 * @return
 *  Array with the expiration time.
 */
function role_expire_get_user_role_expiry_time($uid, $rid) {
  $result = db_query("SELECT expiry_timestamp FROM {role_expire} WHERE uid = :uid AND rid = :rid", array(':uid' => $uid, ':rid' => $rid))->fetchField();
  return (!empty($result)) ? $result : '';
}

/**
 * API function; Get expiration of all roles of a user.
 * @param $uid
 *   User ID.
 * @param $rid
 *   Role ID.
 * @return
 *  Array with the expiration time.
 */
function role_expire_get_all_user_records($uid) {
  $return = array();
  $result = db_query("SELECT rid, expiry_timestamp FROM {role_expire} WHERE uid = :uid", array(':uid' => $uid));
  foreach ($result as $row) {
    $return[$row['rid']] = $row['expiry_timestamp'];
  }
  return $return;
}

/**
 * API function; Delete a record from the database.
 *
 * @param $rid
 *   Role ID.
 * @param $uid
 *   User ID.
 * @return
 */
function role_expire_delete_record($uid, $rid) {
  // I wonder whether on every save if we are doing this?.
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("DELETE FROM {role_expire} WHERE uid=%d AND rid = %d", $uid, $rid) */
  db_delete('role_expire')
  ->condition('uid', $uid)
  ->condition('rid', $rid)
  ->execute();
}
/**
 * API function; Delete all user expirations.
 *
 * @param $rid
 *   Role ID.
 * @param $uid
 *   User ID.
 * @return
 */
function role_expire_delete_user_records($uid) {
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("DELETE FROM {role_expire} WHERE uid = %d", $uid) */
  db_delete('role_expire')
  ->condition('uid', $uid)
  ->execute();
}


/**
 * API function; Insert or update a record in the database.
 *
 * @param $rid
 *   Role ID.
 * @param $uid
 *   User ID.
 * @param $expiry_time
 *   The expiration time string.
 */
function role_expire_write_record($uid, $rid, $expiry_timestamp) {
  $existing = db_query("SELECT expiry_timestamp FROM {role_expire} WHERE uid = :uid AND rid = :rid", array(':uid' => $uid, ':rid' => $rid))->fetchField();
  if ($existing && $expiry_timestamp != $existing) {
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query("UPDATE {role_expire} SET expiry_timestamp = %d WHERE uid = %d AND rid = %d", $expiry_timestamp, $uid, $rid) */
    $result =  db_update('role_expire')
  ->fields(array(
      'expiry_timestamp' => $expiry_timestamp,
    ))
  ->condition('uid', $uid)
  ->condition('rid', $rid)
  ->execute();
  }
  elseif ($existing == FALSE) {
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query("INSERT INTO {role_expire} (uid, rid, expiry_timestamp) VALUES (%d, %d, %d)", $uid, $rid, $expiry_timestamp) */
    $id = db_insert('role_expire')
  ->fields(array(
      'uid' => $uid,
      'rid' => $rid,
      'expiry_timestamp' => $expiry_timestamp,
    ))
  ->execute();
  }
}


/**
 * API function; Get all the default duration for a role.
 * @param $rid
 *   Required. The role_id to check.
 * @return
 *  Int storing the default duration days of the role or an empty string if not set.
 */
function role_expire_get_default_duration($rid) {
  $result = db_query("SELECT duration FROM {role_expire_length} WHERE rid = :rid", array(':rid' => $rid))->fetchField();
  return (!empty($result)) ? $result : '';
}


/**
 * API function; Set the default expiry duration for a role.
 *
 * @param $rid
 *   Role ID.
 * @param $duration
 *   The duration integer (days).
 */
function role_expire_set_default_duration($rid, $duration) {
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("UPDATE {role_expire_length} SET duration = %d WHERE rid = %d", $duration, $rid) */
  $result =  db_update('role_expire_length')
  ->fields(array(
    'duration' => $duration,
  ))
  ->condition('rid', $rid)
  ->execute();
  if (!$result) {
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query("INSERT INTO {role_expire_length} (rid, duration) VALUES (%d, %d)", $rid, $duration) */
    $id = db_insert('role_expire_length')
  ->fields(array(
      'rid' => $rid,
      'duration' => $duration,
    ))
  ->execute();
  }
}

/**
 * API function; Delete a default duration for a role.
 * @param $rid
 *   Required. The role_id to remove.
 */
function role_expire_delete_default_duration($rid) {
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("DELETE FROM {role_expire_length} WHERE rid = %d", $rid) */
  db_delete('role_expire_length')
  ->condition('rid', $rid)
  ->execute();
}

/**
 * API function; Get all records that should be expired.
 *
 * @param $time
 *   Optional. The time to check, if not set it will check current time.
 */
function role_expire_get_expired($time = '') {
  $return = array();
  if (!$time) {
    $time = REQUEST_TIME;
  }
  $result = db_query("SELECT rid, uid, expiry_timestamp FROM {role_expire} WHERE expiry_timestamp <= :expiry_timestamp", array(':expiry_timestamp' => $time));
  foreach ($result as $row) {
    $return[] = $row;
  }
  return $return;
}


/*******************************************************************************
 * Hook implementations
 ******************************************************************************/

/**
 * Implements hook_views_api().
 */
function role_expire_views_api() {
  return array("api" => views_api_version());
}

/**
 * Implements hook_migrate_init().
 */
function role_expire_migrate_init() {
  // Don't load migration support unless we need it
  $path = drupal_get_path('module', 'role_expire') . '/role_expire.migrate.inc';
  include_once DRUPAL_ROOT . '/' . $path;
}

/**
 * Implements hook_permission().
 */
function role_expire_permission() {
  return array(
    'administer role expire' => array(
      'title' => t('administer role expire'),
      'description' => t('TODO Add a description for \'administer role expire\''),
    ),
  );
}

/**
 * Implements hook_form_FORM-ID_alter().
 */
function role_expire_form_user_register_alter(&$form, $form_state) {
  $form = array_merge_recursive($form, role_expire_add_expiration_input());
}

/**
 * Implements hook_form_FORM-ID_alter().
 */
function role_expire_form_user_profile_form_alter(&$form, $form_state) {
  $form['account']['roles']['#attributes'] = array('class' => 'role-expire-roles');
}

/**
 * Implements hook_form_FORM-ID_alter().
 */
function role_expire_form_user_admin_role_alter(&$form, $form_state) {
  $form['role_expire'] = array(
    '#title' => t("Default day length for the role %role",
      array('%role' => drupal_ucfirst($form['name']['#default_value']))),
    '#type' => 'textfield',
    '#size' => 8,
    '#default_value' => role_expire_get_default_duration($form['rid']['#value']),
    '#maxlength' => 5,
    // TODO. WHY IS THIS CLASS BAD? '#attributes' => array('class' => 'role-expire-role-expiry'),
    '#description' => t("Leave blank for no default length. Values should indicate the number of days the role should be active for.")
  );
  // Reposition the submit button and delete.
  $form['submit']['#weight'] = 2;
  if (arg(4)) {
    $form['delete']['#weight'] = 3;
  }
  $form['#validate'][] = 'role_expire_user_admin_role_validate';
  $form['#submit'][] = 'role_expire_user_admin_role_submit';
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function role_expire_user_admin_role_validate($form, &$form_state) {
  if (isset($form_state['values']['role_expire']) && strlen($form_state['values']['role_expire']) && !is_numeric($form_state['values']['role_expire'])) {
    form_set_error('role_expire', 'Role expiry defaults needs to be numeric');
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function role_expire_user_admin_role_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Delete role')) {
    role_expire_delete_default_duration($form_state['values']['rid']);
  }
  else {
    role_expire_set_default_duration($form_state['values']['rid'], $form_state['values']['role_expire']);
    drupal_set_message('Role expiry set.');
  }
}

/**
 * Implements hook_user_XXX().
 */
function role_expire_user_XXX($edit, $account) {
  if ($category == 'account' && (user_access('administer role expire') || user_access('administer users'))) {
    return role_expire_add_expiration_input($account);
  }
}

/**
 * Implements hook_user_presave().
 */
function role_expire_user_presave(&$edit, $account, $category) {
  if ($category == 'account' && (user_access('administer role expire') || user_access('administer users'))) {
    if (isset($edit['roles'])) {
      $time = REQUEST_TIME;
      foreach ($edit['roles'] as $rid => $role) {
        if (is_array($edit) && array_key_exists('role_expire_' . $role, $edit) && $edit['role_expire_' . $role] != '') {
          $expiry_time = strtotime($edit['role_expire_' . $role]);
          if (!$expiry_time) {
            form_set_error('role_expire_' . $role, t("Role expiry time is not in correct format."));
          }
          if ($expiry_time <= $time) {
            form_set_error('role_expire_' . $role, t("Role expiry time must be in the future."));
          }
        }
      }
    }
  }
  if ($category == 'account' && (user_access('administer role expire') || user_access('administer users'))) {
    // Add roles expiry information for the user role.
    // We go over all existing roles, because user might have disabled a role.
    foreach (_role_expire_get_role() as $rid => $role) {
      $role = '';
      if (array_key_exists('role_expire_' . $rid, $edit)) {
        $role = $edit['role_expire_' . $rid];
      }
      if ($role != '') {
        $expiry_timestamp = strtotime($role);
        role_expire_write_record($account->uid, $rid, $expiry_timestamp);
      }
      else {
        if ($category == NULL || $category == 'account') {
          // Handle inserts correctly
          if ($op == 'insert') {
            // Check for Role
            if (array_key_exists($rid, $edit['roles']) && $edit['roles'][$rid] == $rid) {
              role_expire_process_default_role_duration_for_user($rid, $account->uid);
            }
          }
          else {
            // User input is blank, so delete record.
            role_expire_delete_record($account->uid, $rid);
          }
        }
      }
      $edit['role_expire_' . $rid] = NULL;
    }
  }
}

/**
 * Implements hook_user_update().
 */
function role_expire_user_update(&$edit, $account, $category) {
  if ($category == 'account' && (user_access('administer role expire') || user_access('administer users'))) {
    // This adds any new roles that have been given to the user.
    $new_roles = array_diff($account->roles, _role_static_user_roles($account->uid));
    // We have the new roles, loop over them and see whether we need to assign expiry to them.
    foreach ($new_roles as $role_id => $role) {
      role_expire_process_default_role_duration_for_user($role_id, $account->uid);
    }

    // This removes any new roles that have been given to the user.
    $del_roles = array_diff(_role_static_user_roles($account->uid), $account->roles);
    // We have the deleted roles, loop over them and see whether we need to assign expiry to them.
    foreach ($del_roles as $role_id => $role) {
      role_expire_delete_record($account->uid, $role_id);
    }
  }

}


/**
 * Implements hook_user_insert().
 */
function role_expire_user_insert(&$edit, $account, $category) {
  if ($category == 'account' && (user_access('administer role expire') || user_access('administer users'))) {
    // Add roles expiry information for the user role.
    // We go over all existing roles, because user might have disabled a role.
    foreach (_role_expire_get_role() as $rid => $role) {
      $role = '';
      if (array_key_exists('role_expire_' . $rid, $edit)) {
        $role = $edit['role_expire_' . $rid];
      }
      if ($role != '') {
        $expiry_timestamp = strtotime($role);
        role_expire_write_record($account->uid, $rid, $expiry_timestamp);
      }
      else {
        if ($category == NULL || $category == 'account') {
          // Handle inserts correctly
          if ($op == 'insert') {
            // Check for Role
            if (array_key_exists($rid, $edit['roles']) && $edit['roles'][$rid] == $rid) {
              role_expire_process_default_role_duration_for_user($rid, $account->uid);
            }
          }
          else {
            // User input is blank, so delete record.
            role_expire_delete_record($account->uid, $rid);
          }
        }
      }
      $edit['role_expire_' . $rid] = NULL;
    }
  }
}

/**
 * Implements hook_user_cancel().
 */
function role_expire_user_cancel($edit, $account, $method) {
  // Delete user records.
  role_expire_delete_user_records($account->uid);
}

/**
 * Implements hook_user_load().
 */
function role_expire_user_load($users) {
  // We don't load the information to the user object. Other modules can use
  // our API to query the information.

  /**
   * Load the starter roles into a static cache so it is easy to
   * see what has changed later on.
   * 
   * TODO. Support multiple users that are being loaded here. Not sure yet
   * what that means for Role Expire 7.
   */
  foreach ($users as $account) {
    _role_static_user_roles($account->uid, $account->roles);
  }

}

/**
 * Implements hook_user_view().
 */
function role_expire_user_view($account, $view_mode) {
  global $user;
  if (user_access('administer role expire') || user_access('administer users') || $user->uid == $account->uid) {
    $roles = array();
    $expiry_roles = role_expire_get_all_user_records($account->uid);
    foreach ($account->roles as $key => $val) {
      if (array_key_exists($key, $expiry_roles)) {
        $roles[$key] =  t("%role role - expires on %timedate", array('%role' => ucfirst($val), '%timedate' => format_date($expiry_roles[$key])));
      }
    }
    if ($roles) {
      $account->content['summary']['role_expire'] = array(
          '#type' => 'user_profile_item',
          '#title' => t('Role expiration'),
          '#value' => theme('item_list', array('items' => $roles)),
          '#attributes' => array('class' => 'role-expiry-roles'),
        );
    }
  }
}

/**
 * Implements hook_user().
 */
function role_expire_user_OLD($op, &$edit, &$account, $category = NULL) { }

/**
 * Implements hook_cron().
 */
function role_expire_cron() {
  if ($expires = role_expire_get_expired()) {
    $roles = _role_expire_get_role();
    foreach ($expires as $expire) {

      // Remove the role from the user.
      // TODO Convert "user_load" to "user_load_multiple" if "$expire['uid']" is other than a uid.
      // To return a single user object, wrap "user_load_multiple" with "array_shift" or equivalent.
      // Example: array_shift(user_load_multiple(array(), $expire['uid']))
      $account = user_load($expire['uid']);
      $edit = $account->roles;
      unset($edit[$expire['rid']]);
      // In the documentation for the role_expire implementation of hook_user we
      // state to use $category = 'account'.  We don't do that here because
      // that would cause the delete to occur twice.
      user_save($account, array('roles' => $edit), NULL);

      // Remove the role expiration record.
      role_expire_delete_record($expire['uid'], $expire['rid']);
      watchdog('role expire', 'Remove role @role from user @account.', array('@role' => $roles[$expire['rid']], '@account' => $account->name));
    }
  }
}


/**
 * Add form element that accepts the role expiration time.
 *
 * @param $account
 *   The user object.
 * @return
 *   Form element.
 */
function role_expire_add_expiration_input($account = NULL) {
  $form = array();
  if (user_access('administer users') || user_access('administer role expire')) {
    drupal_add_js(drupal_get_path('module', 'role_expire') . '/role_expire.js');
    $form['roles']['#attributes'] = array('class' => 'role-expire-roles');

    foreach (_role_expire_get_role() as $rid => $role) {
      if (is_object($account) and array_key_exists('uid', $account)) {
        $expiry_timestamp = role_expire_get_user_role_expiry_time($account->uid, $rid);
      }
      else {
        $expiry_timestamp = '';
      }
      $form['role_expire_' . $rid] = array(
        '#title' => t("%role role expiration time", array('%role' => drupal_ucfirst($role))),
        '#type' => 'textfield',
        '#default_value' => !empty($expiry_timestamp) ? date("d-m-Y G:i:s", $expiry_timestamp) : '',
        '#attributes' => array('class' => 'role-expire-role-expiry'),
        '#description' => t("Leave blank for default role expiry (never, or the duration you have set for the role), enter date and time in format: <em>yyyy-mm-dd hh:mm:ss</em> or use relative time i.e. 1 day, 2 months, 1 year, 3 years.")
      );
    }
  }
  return $form;
}

/*******************************************************************************
 * Helper functions
 ******************************************************************************/

/**
 * Helper function; Store user roles for this page request.
 * @return
 *   array of roles
 */
function _role_static_user_roles($id, $roles = '') {
  static $user_roles = array();
  if (!isset($user_roles[$id]) && is_array($roles)) {
    $user_roles[$id] = $roles;
  }
  if (!isset($user_roles[$id])) {
    return FALSE;
  }
  else {
    return $user_roles[$id];
  }

}

/**
 * Helper function; Get valid roles.
 * @return unknown_type
 */
function _role_expire_get_role() {
  $roles = user_roles(TRUE);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  return $roles;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function role_expire_process_default_role_duration_for_user($role_id, $uid) {
  // Does a default expiry exist?.
  $role_day_period = role_expire_get_default_duration($role_id);
  if ($role_day_period) {
    $user_role_expiry = role_expire_get_user_role_expiry_time($uid, $role_id);
    // If the expiry is empty then we act!.
    if (!$user_role_expiry) {
      // Add the current date to the role day period and save it back to the role_expire row.
      role_expire_write_record($uid, $role_id, mktime(0, 0, 0, date("m"), date("d") + $role_day_period, date("Y")));
    }
  }
}
